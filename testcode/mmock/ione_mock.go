// Code generated by MockGen. DO NOT EDIT.
// Source: ./test-code/main.go

// Package mmock is a generated GoMock package.
package mmock

import (
	gomock "github.com/golang/mock/gomock"
	testdata "github.com/iostrovok/go-mockdata/testcode"
	otherpackage "github.com/iostrovok/go-mockdata/testcode/otherpackage"
	reflect "reflect"
)

// MockIOne is a mock of IOne interface
type MockIOne struct {
	ctrl     *gomock.Controller
	recorder *MockIOneMockRecorder
}

// MockIOneMockRecorder is the mock recorder for MockIOne
type MockIOneMockRecorder struct {
	mock *MockIOne
}

// NewMockIOne creates a new mock instance
func NewMockIOne(ctrl *gomock.Controller) *MockIOne {
	mock := &MockIOne{ctrl: ctrl}
	mock.recorder = &MockIOneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOne) EXPECT() *MockIOneMockRecorder {
	return m.recorder
}

// FirstFunc mocks base method
func (m *MockIOne) FirstFunc(s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstFunc", s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstFunc indicates an expected call of FirstFunc
func (mr *MockIOneMockRecorder) FirstFunc(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstFunc", reflect.TypeOf((*MockIOne)(nil).FirstFunc), s)
}

// SecondFunc mocks base method
func (m *MockIOne) SecondFunc(s string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecondFunc", s)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecondFunc indicates an expected call of SecondFunc
func (mr *MockIOneMockRecorder) SecondFunc(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecondFunc", reflect.TypeOf((*MockIOne)(nil).SecondFunc), s)
}

// ThirdFunc mocks base method
func (m *MockIOne) ThirdFunc(s string) ([]string, testdata.LocalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThirdFunc", s)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(testdata.LocalError)
	return ret0, ret1
}

// ThirdFunc indicates an expected call of ThirdFunc
func (mr *MockIOneMockRecorder) ThirdFunc(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThirdFunc", reflect.TypeOf((*MockIOne)(nil).ThirdFunc), s)
}

// FourthFunc mocks base method
func (m *MockIOne) FourthFunc(s string) ([]string, otherpackage.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FourthFunc", s)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(otherpackage.Error)
	return ret0, ret1
}

// FourthFunc indicates an expected call of FourthFunc
func (mr *MockIOneMockRecorder) FourthFunc(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FourthFunc", reflect.TypeOf((*MockIOne)(nil).FourthFunc), s)
}
